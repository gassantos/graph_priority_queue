name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  # Job 1: Generate API Documentation
  api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          graphviz \
          plantuml
          
    - name: Create Doxygen config
      run: |
        cat > Doxyfile << 'EOF'
        # Doxygen configuration for Legal Document Pipeline
        PROJECT_NAME           = "Legal Document Processing Pipeline"
        PROJECT_NUMBER         = "1.0.0"
        PROJECT_BRIEF          = "Modular C++ pipeline for legal document processing"
        
        OUTPUT_DIRECTORY       = docs/api
        CREATE_SUBDIRS         = YES
        
        INPUT                  = src include README.md
        INPUT_ENCODING         = UTF-8
        RECURSIVE              = YES
        
        EXTRACT_ALL            = YES
        EXTRACT_PRIVATE        = NO
        EXTRACT_STATIC         = YES
        
        GENERATE_HTML          = YES
        HTML_OUTPUT            = html
        HTML_FILE_EXTENSION    = .html
        HTML_COLORSTYLE_HUE    = 220
        HTML_COLORSTYLE_SAT    = 100
        HTML_COLORSTYLE_GAMMA  = 80
        HTML_TIMESTAMP         = YES
        HTML_DYNAMIC_SECTIONS  = YES
        
        GENERATE_LATEX         = NO
        GENERATE_XML           = YES
        
        HAVE_DOT               = YES
        DOT_IMAGE_FORMAT       = svg
        INTERACTIVE_SVG        = YES
        DOT_TRANSPARENT        = YES
        
        CLASS_DIAGRAMS         = YES
        COLLABORATION_GRAPH    = YES
        GROUP_GRAPHS           = YES
        UML_LOOK               = YES
        
        CALL_GRAPH             = YES
        CALLER_GRAPH           = YES
        
        SOURCE_BROWSER         = YES
        INLINE_SOURCES         = NO
        STRIP_CODE_COMMENTS    = NO
        
        ALPHABETICAL_INDEX     = YES
        COLS_IN_ALPHA_INDEX    = 5
        
        MACRO_EXPANSION        = YES
        EXPAND_ONLY_PREDEF     = NO
        
        WARN_IF_UNDOCUMENTED   = YES
        WARN_IF_DOC_ERROR      = YES
        WARN_NO_PARAMDOC       = YES
        
        EXAMPLE_PATH           = examples
        EXAMPLE_PATTERNS       = *
        
        USE_MDFILE_AS_MAINPAGE = README.md
        EOF
        
    - name: Generate documentation
      run: |
        doxygen Doxyfile
        
    - name: Create documentation index
      run: |
        mkdir -p docs
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Legal Document Processing Pipeline - Documentation</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { text-align: center; margin-bottom: 40px; }
                .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                .link { display: inline-block; margin: 10px; padding: 10px 20px; 
                       background: #007ACC; color: white; text-decoration: none; border-radius: 3px; }
                .link:hover { background: #005A9E; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Legal Document Processing Pipeline</h1>
                <p>Comprehensive Documentation Portal</p>
            </div>
            
            <div class="section">
                <h2>ðŸ“š Documentation</h2>
                <a href="api/html/index.html" class="link">API Documentation</a>
                <a href="../README.md" class="link">User Guide</a>
                <a href="../ARCHITECTURE.md" class="link">Architecture</a>
            </div>
            
            <div class="section">
                <h2>ðŸ”§ Development</h2>
                <p>For developers working on the pipeline:</p>
                <ul>
                    <li><strong>Build System:</strong> CMake + Makefile</li>
                    <li><strong>Testing:</strong> Google Test framework</li>
                    <li><strong>Code Style:</strong> Modern C++17</li>
                    <li><strong>Modules:</strong> Utils, Pipeline, Scheduler, Tokenizer</li>
                </ul>
            </div>
            
            <div class="section">
                <h2>ðŸš€ Quick Start</h2>
                <pre><code>git clone &lt;repository&gt;
        cd graph_priority_summary
        make clean && make all
        make test
        make run</code></pre>
            </div>
        </body>
        </html>
        EOF
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: docs/
        
  # Job 2: Deploy to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: api-docs
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
     
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: api-documentation
        path: docs/
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
      
  # Job 3: Documentation quality check
  docs-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          aspell \
          aspell-en
          
    - name: Check documentation coverage
      run: |
        echo "Checking documentation coverage..."
        
        # Count total functions/classes
        total_functions=$(grep -r "^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*(" src/ include/ | wc -l)
        total_classes=$(grep -r "^[[:space:]]*class[[:space:]]\+[a-zA-Z_]" src/ include/ | wc -l)
        
        # Count documented functions/classes (basic check for /** comments)
        documented_items=$(grep -r "/\*\*" src/ include/ | wc -l)
        
        echo "Documentation statistics:"
        echo "  Total functions: $total_functions"
        echo "  Total classes: $total_classes"
        echo "  Documented items: $documented_items"
        
        if [ $total_functions -gt 0 ]; then
          coverage=$((documented_items * 100 / (total_functions + total_classes)))
          echo "  Documentation coverage: ${coverage}%"
          
          if [ $coverage -lt 50 ]; then
            echo "Warning: Documentation coverage is below 50%"
          fi
        fi
        
    - name: Spell check README
      run: |
        echo "Spell checking documentation..."
        aspell list < README.md | sort | uniq > spelling-errors.txt || true
        
        if [ -s spelling-errors.txt ]; then
          echo "Potential spelling errors found:"
          cat spelling-errors.txt | head -20
        else
          echo "No spelling errors detected in README.md"
        fi
        
    - name: Check for broken internal links
      run: |
        echo "Checking for broken internal links..."
        
        # Find markdown links
        grep -r "\[.*\](.*)" *.md docs/ 2>/dev/null | while read -r line; do
          file=$(echo "$line" | cut -d: -f1)
          link=$(echo "$line" | sed 's/.*](\([^)]*\)).*/\1/')
          
          # Skip external links (http/https)
          if [[ ! "$link" =~ ^https?:// ]]; then
            if [[ "$link" =~ ^[^#]*$ ]] && [ ! -f "$link" ]; then
              echo "Broken link in $file: $link"
            fi
          fi
        done || true
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docs-quality-report
        path: |
          spelling-errors.txt
