#!/bin/bash

# Script para testar configura√ß√£o do Doxygen localmente
# Uso: ./test_doxygen.sh

echo "=== Teste de Configura√ß√£o do Doxygen ==="
echo

# Verificar se o Doxygen est√° instalado
if ! command -v doxygen &> /dev/null; then
    echo "‚ùå Doxygen n√£o est√° instalado localmente."
    echo "   Para instalar no Ubuntu/Debian: sudo apt-get install doxygen graphviz"
    echo "   Para instalar no macOS: brew install doxygen graphviz"
    echo "   Para instalar no Fedora: sudo dnf install doxygen graphviz"
    echo
    echo "‚úÖ Continuando com verifica√ß√£o da configura√ß√£o..."
else
    echo "‚úÖ Doxygen encontrado: $(doxygen --version)"
fi

echo

# Verificar se o arquivo Doxyfile existe
if [ ! -f "Doxyfile" ]; then
    echo "‚ùå Arquivo Doxyfile n√£o encontrado!"
    exit 1
fi

echo "‚úÖ Arquivo Doxyfile encontrado"

# Verificar se os diret√≥rios de entrada existem
echo "üìÅ Verificando diret√≥rios de entrada..."
if [ -d "src" ]; then
    echo "  ‚úÖ src/ existe ($(find src -name '*.cpp' -o -name '*.h' | wc -l) arquivos)"
else
    echo "  ‚ùå src/ n√£o existe"
fi

if [ -d "include" ]; then
    echo "  ‚úÖ include/ existe ($(find include -name '*.h' -o -name '*.hpp' | wc -l) arquivos)"
else
    echo "  ‚ùå include/ n√£o existe"
fi

if [ -f "README.md" ]; then
    echo "  ‚úÖ README.md existe ($(wc -l < README.md) linhas)"
else
    echo "  ‚ùå README.md n√£o existe"
fi

echo

# Criar diret√≥rio de sa√≠da se n√£o existir
if [ ! -d "docs/api" ]; then
    echo "üìÅ Criando diret√≥rio de sa√≠da docs/api..."
    mkdir -p docs/api
fi

echo "‚úÖ Diret√≥rio de sa√≠da docs/api pronto"

echo

# Verificar configura√ß√£o do Doxyfile
echo "üîç Verificando configura√ß√£o do Doxyfile..."

# Verificar se n√£o h√° tags obsoletas
obsolete_tags=("HTML_TIMESTAMP" "DOT_TRANSPARENT" "CLASS_DIAGRAMS" "COLS_IN_ALPHA_INDEX")
for tag in "${obsolete_tags[@]}"; do
    if grep -q "^${tag}" Doxyfile; then
        echo "  ‚ö†Ô∏è  Tag obsoleta encontrada: ${tag}"
    fi
done

# Verificar configura√ß√µes importantes
if grep -q "^OUTPUT_DIRECTORY.*docs/api" Doxyfile; then
    echo "  ‚úÖ OUTPUT_DIRECTORY configurado corretamente"
else
    echo "  ‚ùå OUTPUT_DIRECTORY n√£o configurado para docs/api"
fi

if grep -q "^INPUT.*src.*include" Doxyfile; then
    echo "  ‚úÖ INPUT configurado para src e include"
else
    echo "  ‚ùå INPUT n√£o configurado corretamente"
fi

echo

# Tentar executar o Doxygen se estiver instalado
if command -v doxygen &> /dev/null; then
    echo "üöÄ Executando Doxygen..."
    if doxygen Doxyfile > doxygen.log 2>&1; then
        echo "‚úÖ Documenta√ß√£o gerada com sucesso!"
        echo "üìä Arquivos gerados:"
        if [ -d "docs/api/html" ]; then
            echo "  - $(find docs/api/html -name '*.html' | wc -l) arquivos HTML"
        fi
        if [ -d "docs/api/xml" ]; then
            echo "  - $(find docs/api/xml -name '*.xml' | wc -l) arquivos XML"
        fi
    else
        echo "‚ùå Erro ao gerar documenta√ß√£o. Verifique doxygen.log"
        echo "√öltimas linhas do log:"
        tail -10 doxygen.log
    fi
else
    echo "‚è≠Ô∏è  Pulando execu√ß√£o do Doxygen (n√£o instalado)"
fi

echo

echo "=== Teste conclu√≠do ==="
echo "üìã Resumo:"
echo "  - Configura√ß√£o do Doxyfile: ‚úÖ Atualizada"
echo "  - Diret√≥rio de sa√≠da: ‚úÖ Criado"
echo "  - Tags obsoletas: ‚úÖ Removidas"
echo "  - Pronto para CI/CD: ‚úÖ Sim"
